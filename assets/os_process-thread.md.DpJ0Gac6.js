import{_ as a,c as t,o as e,a3 as r}from"./chunks/framework.BOZns9vE.js";const u=JSON.parse('{"title":"进程和线程，以及它们的区别！","description":"","frontmatter":{},"headers":[],"relativePath":"os/process-thread.md","filePath":"os/process-thread.md","lastUpdated":1719995857000}'),o={name:"os/process-thread.md"},i=r('<h1 id="进程和线程-以及它们的区别" tabindex="-1">进程和线程，以及它们的区别！ <a class="header-anchor" href="#进程和线程-以及它们的区别" aria-label="Permalink to &quot;进程和线程，以及它们的区别！&quot;">​</a></h1><h2 id="一、进程" tabindex="-1">一、进程 <a class="header-anchor" href="#一、进程" aria-label="Permalink to &quot;一、进程&quot;">​</a></h2><p><strong>进程</strong>（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p><p>操作系统的其他所有内容都是围绕着进程展开的，负责执行这些任务的是<code>CPU</code>。</p><p><img src="https://static.vue-js.com/3ff146b0-02f6-11ec-8e64-91fdec0f05a1.png" alt="img"></p><p>进程是一种抽象的概念，从来没有统一的标准定义看，一般由程序、数据集合和进程控制块三部分组成：</p><ul><li>程序用于描述进程要完成的功能，是控制进程执行的指令集</li><li>数据集合是程序在执行时所需要的数据和工作区</li><li>程序控制块，包含进程的描述信息和控制信息，是进程存在的唯一标志</li></ul><h2 id="二、线程" tabindex="-1">二、线程 <a class="header-anchor" href="#二、线程" aria-label="Permalink to &quot;二、线程&quot;">​</a></h2><p><strong>线程</strong>（thread）是操作系统能够进行运算调度的最小单位，它被包含在进程之中，其是进程中的实际运作单位（控制单元），负责当前进程中程序的执行。</p><p>一个进程可以包含一个或多个线程，这些线程共享进程的资源，如内存空间和文件句柄。线程拥有自己的执行栈和局部变量，但访问进程的全局变量。由于多个线程可以并发执行，它们能够在同一进程内执行不同的任务，从而实现程序的高效并发运行。线程可以在不同的处理器上并行执行，从而提高程序的运行速度和响应性。</p><p><img src="https://static.vue-js.com/63de34c0-02f6-11ec-a752-75723a64e8f5.png" alt="img"></p><h2 id="三、区别" tabindex="-1">三、区别 <a class="header-anchor" href="#三、区别" aria-label="Permalink to &quot;三、区别&quot;">​</a></h2><ul><li><strong>根本区别</strong>：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。</li><li><strong>资源开销</strong>：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li><li><strong>包含关系</strong>：进程中包含了线程，线程属于进程。一个进程可以有很多线程，每条线程并行执行不同的任务。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</li><li><strong>内存分配</strong>：同一进程的线程共享本进程的地址空间和资源，而进程之间的地址空间和资源是相互独立的。</li><li><strong>影响关系</strong>：子进程无法影响父进程，而子线程可以影响父线程，如果主线程发生异常会影响其所在进程和子线程。与进程相对应，线程与资源分配无关，它属于某一个进程，并与进程内的其他线程一起共享进程的资源。</li><li><strong>执行过程</strong>：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行。</li></ul><p>举个例子：进程=火车，线程=车厢</p><ul><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',16),s=[i];function l(n,c,d,h,p,_){return e(),t("div",null,s)}const f=a(o,[["render",l]]);export{u as __pageData,f as default};
